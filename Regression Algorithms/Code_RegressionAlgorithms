{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Importing libararies\n",
    "%matplotlib inline\n",
    "import os\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "plt.rcParams['figure.figsize'] = (14, 12)\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "from sklearn.model_selection import train_test_split\n",
    "import seaborn as sns\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.metrics import accuracy_score , classification_report, confusion_matrix\n",
    "import warnings\n",
    "import math\n",
    "import random\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Change the directory name\n",
    "os.chdir('C:\\\\Users\\\\Manan\\\\Desktop\\\\ML')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Reading the data\n",
    "df = pd.read_csv(\"sgemm_product.csv\")\n",
    "df.shape\n",
    "random.seed(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MWG</th>\n",
       "      <th>NWG</th>\n",
       "      <th>KWG</th>\n",
       "      <th>MDIMC</th>\n",
       "      <th>NDIMC</th>\n",
       "      <th>MDIMA</th>\n",
       "      <th>NDIMB</th>\n",
       "      <th>KWI</th>\n",
       "      <th>VWM</th>\n",
       "      <th>VWN</th>\n",
       "      <th>STRM</th>\n",
       "      <th>STRN</th>\n",
       "      <th>SA</th>\n",
       "      <th>SB</th>\n",
       "      <th>Run1 (ms)</th>\n",
       "      <th>Run2 (ms)</th>\n",
       "      <th>Run3 (ms)</th>\n",
       "      <th>Run4 (ms)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>115.26</td>\n",
       "      <td>115.87</td>\n",
       "      <td>118.55</td>\n",
       "      <td>115.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>78.13</td>\n",
       "      <td>78.25</td>\n",
       "      <td>79.25</td>\n",
       "      <td>79.19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>79.84</td>\n",
       "      <td>80.69</td>\n",
       "      <td>80.76</td>\n",
       "      <td>80.97</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>84.32</td>\n",
       "      <td>89.90</td>\n",
       "      <td>86.75</td>\n",
       "      <td>85.58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>115.13</td>\n",
       "      <td>121.98</td>\n",
       "      <td>122.73</td>\n",
       "      <td>114.81</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   MWG  NWG  KWG  MDIMC  NDIMC  MDIMA  NDIMB  KWI  VWM  VWN  STRM  STRN  SA  \\\n",
       "0   16   16   16      8      8      8      8    2    1    1     0     0   0   \n",
       "1   16   16   16      8      8      8      8    2    1    1     0     0   0   \n",
       "2   16   16   16      8      8      8      8    2    1    1     0     0   1   \n",
       "3   16   16   16      8      8      8      8    2    1    1     0     0   1   \n",
       "4   16   16   16      8      8      8      8    2    1    1     0     1   0   \n",
       "\n",
       "   SB  Run1 (ms)  Run2 (ms)  Run3 (ms)  Run4 (ms)  \n",
       "0   0     115.26     115.87     118.55     115.80  \n",
       "1   1      78.13      78.25      79.25      79.19  \n",
       "2   0      79.84      80.69      80.76      80.97  \n",
       "3   1      84.32      89.90      86.75      85.58  \n",
       "4   0     115.13     121.98     122.73     114.81  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 241600 entries, 0 to 241599\n",
      "Data columns (total 18 columns):\n",
      "MWG          241600 non-null int64\n",
      "NWG          241600 non-null int64\n",
      "KWG          241600 non-null int64\n",
      "MDIMC        241600 non-null int64\n",
      "NDIMC        241600 non-null int64\n",
      "MDIMA        241600 non-null int64\n",
      "NDIMB        241600 non-null int64\n",
      "KWI          241600 non-null int64\n",
      "VWM          241600 non-null int64\n",
      "VWN          241600 non-null int64\n",
      "STRM         241600 non-null int64\n",
      "STRN         241600 non-null int64\n",
      "SA           241600 non-null int64\n",
      "SB           241600 non-null int64\n",
      "Run1 (ms)    241600 non-null float64\n",
      "Run2 (ms)    241600 non-null float64\n",
      "Run3 (ms)    241600 non-null float64\n",
      "Run4 (ms)    241600 non-null float64\n",
      "dtypes: float64(4), int64(14)\n",
      "memory usage: 33.2 MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MWG          0\n",
       "NWG          0\n",
       "KWG          0\n",
       "MDIMC        0\n",
       "NDIMC        0\n",
       "MDIMA        0\n",
       "NDIMB        0\n",
       "KWI          0\n",
       "VWM          0\n",
       "VWN          0\n",
       "STRM         0\n",
       "STRN         0\n",
       "SA           0\n",
       "SB           0\n",
       "Run1 (ms)    0\n",
       "Run2 (ms)    0\n",
       "Run3 (ms)    0\n",
       "Run4 (ms)    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Checking for missing values\n",
    "df.isnull().sum()\n",
    "\n",
    "#There are no missing values in this dataset. \n",
    "#We could also notice this when we used the info() function where all the features had non null values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MWG</th>\n",
       "      <th>NWG</th>\n",
       "      <th>KWG</th>\n",
       "      <th>MDIMC</th>\n",
       "      <th>NDIMC</th>\n",
       "      <th>MDIMA</th>\n",
       "      <th>NDIMB</th>\n",
       "      <th>KWI</th>\n",
       "      <th>VWM</th>\n",
       "      <th>VWN</th>\n",
       "      <th>STRM</th>\n",
       "      <th>STRN</th>\n",
       "      <th>SA</th>\n",
       "      <th>SB</th>\n",
       "      <th>Avg_Run</th>\n",
       "      <th>LogAvg_Run</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>116.3700</td>\n",
       "      <td>4.756775</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>78.7050</td>\n",
       "      <td>4.365707</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>80.5650</td>\n",
       "      <td>4.389064</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>86.6375</td>\n",
       "      <td>4.461733</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>118.6625</td>\n",
       "      <td>4.776283</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   MWG  NWG  KWG  MDIMC  NDIMC  MDIMA  NDIMB  KWI  VWM  VWN  STRM  STRN  SA  \\\n",
       "0   16   16   16      8      8      8      8    2    1    1     0     0   0   \n",
       "1   16   16   16      8      8      8      8    2    1    1     0     0   0   \n",
       "2   16   16   16      8      8      8      8    2    1    1     0     0   1   \n",
       "3   16   16   16      8      8      8      8    2    1    1     0     0   1   \n",
       "4   16   16   16      8      8      8      8    2    1    1     0     1   0   \n",
       "\n",
       "   SB   Avg_Run  LogAvg_Run  \n",
       "0   0  116.3700    4.756775  \n",
       "1   1   78.7050    4.365707  \n",
       "2   0   80.5650    4.389064  \n",
       "3   1   86.6375    4.461733  \n",
       "4   0  118.6625    4.776283  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Taking the average of runs for target variable\n",
    "df[\"Avg_Run\"] = df.iloc[:,14:].mean(axis = 1)\n",
    "\n",
    "#Taking log of the Average run times\n",
    "df[\"LogAvg_Run\"] = np.log(df.Avg_Run) \n",
    "\n",
    "#Dropping the four Run columns\n",
    "df.drop(['Run1 (ms)', 'Run2 (ms)','Run3 (ms)', 'Run4 (ms)'], axis = 1, inplace = True)\n",
    "\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[<matplotlib.axes._subplots.AxesSubplot object at 0x0000025AC0A82A58>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x0000025AC15400B8>]],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#We plot the average run with the log of the average run to see which would be a better choice for a target variable\n",
    "#We see that Avg_Run has skewness but the LogAvg_Run has a better distribution. So we use LogAvg_Run as our target variable.\n",
    "run_time = [\"Avg_Run\",\"LogAvg_Run\"]\n",
    "run_times=df[run_time]\n",
    "run_times.hist(bins = 20) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Dropping the Average run column\n",
    "df.drop(['Avg_Run'], axis = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Linear Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Create the cost function and our goal is to minimize it\n",
    "def costFunction(X,Y,beta):\n",
    "    summation = np.power(((X @ beta.T)-Y),2)\n",
    "    finalCost = np.sum(summation)/(2 * len(X))\n",
    "    return finalCost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Implementing batch Gradient Descent\n",
    "#Batch Gradient Descent is nothing but each step of G.D will use all of the training examples\n",
    "def gradientDescent(X,Y,beta,iterations,alpha):\n",
    "    cost = np.zeros(iterations)\n",
    "    diff = 1\n",
    "    convg = 0\n",
    "    for i in range(iterations):\n",
    "        beta = beta - (alpha/len(X)) * np.sum(X * (X @ beta.T - Y), axis=0)\n",
    "        cost[i] = costFunction(X, Y, beta)\n",
    "        if diff > 0.0000001:    \n",
    "            if i==0:\n",
    "                diff = cost[i]\n",
    "            else:\n",
    "                diff = abs(cost[i] - cost[i-1])\n",
    "                if diff <= 0.0000001:\n",
    "                    convg = i\n",
    "    return beta,cost,convg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Implement batch gradient descent with convergence threshold as input\n",
    "def gradientDescentThresh(X,Y,beta,alpha,thresh,iterations=5000):\n",
    "    cost = []\n",
    "    diff = 1\n",
    "    convg = 0\n",
    "    while diff > thresh:\n",
    "        beta = beta - (alpha/len(X)) * np.sum(X * (X @ beta.T - Y), axis=0)\n",
    "        cost.append(costFunction(X, Y, beta))\n",
    "        if len(cost)==1:\n",
    "            diff = cost[0]\n",
    "        else:\n",
    "            diff = abs(cost[-1] - cost[-2])\n",
    "            if diff <= thresh:\n",
    "                convg = len(cost)\n",
    "    return beta,cost,convg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Implement batch gradient descent with convergence threshold as input\n",
    "#Calculate Test and Train dataset MSE at each iteration\n",
    "def gradientDescentIterationsMSE(X,Y,X_test,Y_test,beta,alpha,thresh,iterations=5000):\n",
    "    test_error = []\n",
    "    train_error = []\n",
    "    cost = []\n",
    "    diff = 1\n",
    "    convg = 0\n",
    "    while diff > thresh:\n",
    "        beta = beta - (alpha/len(X)) * np.sum(X * (X @ beta.T - Y), axis=0)\n",
    "        cost.append(costFunction(X, Y, beta))\n",
    "        \n",
    "        y_hat_test = predict(X_test,beta)\n",
    "        y_hat_train = predict(X,beta)\n",
    "        \n",
    "        test_MSE = calculateMSE(Y_test,y_hat_test)\n",
    "        train_MSE = calculateMSE(Y,y_hat_train)\n",
    "        \n",
    "        test_error.append(test_MSE)\n",
    "        train_error.append(train_MSE)\n",
    "        \n",
    "        if len(cost)==1:\n",
    "            diff = cost[0]\n",
    "        else:\n",
    "            diff = abs(cost[-1] - cost[-2])\n",
    "            if diff <= thresh:\n",
    "                convg = len(cost)\n",
    "    return test_error,train_error,convg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Calculate predicted Y\n",
    "def predict(X,beta):\n",
    "    Y_hat = X.dot(beta.T)\n",
    "    return Y_hat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Calculate MSE\n",
    "def calculateMSE(Y, Y_hat):\n",
    "    MSE = (np.sum((Y - Y_hat) ** 2) / len(Y));\n",
    "    return MSE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Calculate R-squared\n",
    "def calculateRSquared(Y, Y_hat):\n",
    "    Y_mean = np.mean(Y)\n",
    "    residualSSE = np.sum((Y - Y_hat) ** 2)\n",
    "    totalSSE = np.sum((Y - Y_mean) ** 2)\n",
    "    rSquared = 1 - (residualSSE / totalSSE)\n",
    "    return rSquared"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "def results(X,Y,X_test,Y_test,beta,iterations,alpha):\n",
    "    print(\"Alpha value:\", alpha)\n",
    "    beta_value,cost_value,convg_value = gradientDescent(X,Y,beta,iterations,alpha)\n",
    "    \n",
    "    print(\"The beta values are:\",beta_value)\n",
    "    print(\"The final value of cost function is:\", cost_value[-1])\n",
    "    print(\"The value of cost function converges at:\", convg_value)\n",
    "\n",
    "    plt.plot(cost_value) \n",
    "    plt.xlabel(\"Number of iterations\") \n",
    "    plt.ylabel(\"Cost\") \n",
    "    plt.title(\"Cost Converging wrt Iterations\")\n",
    "    plt.show()\n",
    "    \n",
    "    #Calculating MSE for test and train data\n",
    "    y_hat_test = predict(X_test,beta_value)\n",
    "    y_hat_train = predict(X,beta_value)\n",
    "    \n",
    "    test_MSE = calculateMSE(Y_test,y_hat_test)\n",
    "    train_MSE = calculateMSE(Y,y_hat_train)\n",
    "    \n",
    "    print(\"Test data MSE: \",test_MSE)\n",
    "    print(\"Train data MSE: \",train_MSE)\n",
    "    \n",
    "    #Calculating R-squared for test and train data\n",
    "    print(\"Test data R-squared: \",calculateRSquared(Y_test,y_hat_test))\n",
    "    print(\"Train data R-squared: \",calculateRSquared(Y,y_hat_train))\n",
    "    \n",
    "    return test_MSE, train_MSE"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Experiment 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Normalize using StandardScaler function\n",
    "sc = StandardScaler()\n",
    "LineReg = sc.fit_transform(df)\n",
    "LineReg = pd.DataFrame(LineReg)\n",
    "LineReg.columns = ['MWG', 'NWG', 'KWG', 'MDIMC', 'NDIMC', 'MDIMA', 'NDIMB', 'KWI',\n",
    "       'VWM', 'VWN', 'STRM', 'STRN', 'SA', 'SB', 'LogAvg_Run']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MWG</th>\n",
       "      <th>NWG</th>\n",
       "      <th>KWG</th>\n",
       "      <th>MDIMC</th>\n",
       "      <th>NDIMC</th>\n",
       "      <th>MDIMA</th>\n",
       "      <th>NDIMB</th>\n",
       "      <th>KWI</th>\n",
       "      <th>VWM</th>\n",
       "      <th>VWN</th>\n",
       "      <th>STRM</th>\n",
       "      <th>STRN</th>\n",
       "      <th>SA</th>\n",
       "      <th>SB</th>\n",
       "      <th>LogAvg_Run</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-1.210997</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.998054</td>\n",
       "      <td>-0.998054</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.741449</td>\n",
       "      <td>-0.741449</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0.118479</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-1.210997</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.998054</td>\n",
       "      <td>-0.998054</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.741449</td>\n",
       "      <td>-0.741449</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.228050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-1.210997</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.998054</td>\n",
       "      <td>-0.998054</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.741449</td>\n",
       "      <td>-0.741449</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.207353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-1.210997</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.998054</td>\n",
       "      <td>-0.998054</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.741449</td>\n",
       "      <td>-0.741449</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.142961</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-1.210997</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.998054</td>\n",
       "      <td>-0.998054</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.741449</td>\n",
       "      <td>-0.741449</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0.135766</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        MWG       NWG       KWG     MDIMC     NDIMC     MDIMA     NDIMB  KWI  \\\n",
       "0 -1.516757 -1.516757 -1.210997 -0.753894 -0.753894 -0.998054 -0.998054 -1.0   \n",
       "1 -1.516757 -1.516757 -1.210997 -0.753894 -0.753894 -0.998054 -0.998054 -1.0   \n",
       "2 -1.516757 -1.516757 -1.210997 -0.753894 -0.753894 -0.998054 -0.998054 -1.0   \n",
       "3 -1.516757 -1.516757 -1.210997 -0.753894 -0.753894 -0.998054 -0.998054 -1.0   \n",
       "4 -1.516757 -1.516757 -1.210997 -0.753894 -0.753894 -0.998054 -0.998054 -1.0   \n",
       "\n",
       "        VWM       VWN  STRM  STRN   SA   SB  LogAvg_Run  \n",
       "0 -0.741449 -0.741449  -1.0  -1.0 -1.0 -1.0    0.118479  \n",
       "1 -0.741449 -0.741449  -1.0  -1.0 -1.0  1.0   -0.228050  \n",
       "2 -0.741449 -0.741449  -1.0  -1.0  1.0 -1.0   -0.207353  \n",
       "3 -0.741449 -0.741449  -1.0  -1.0  1.0  1.0   -0.142961  \n",
       "4 -0.741449 -0.741449  -1.0   1.0 -1.0 -1.0    0.135766  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "LineReg.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of Feature matrix: (241600, 15)\n",
      "Shape of Target matrix: (241600, 1)\n",
      "Initial beta values: [[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]\n"
     ]
    }
   ],
   "source": [
    "#Setting the matrices\n",
    "X = LineReg.iloc[:,0:14]\n",
    "ones = np.ones([X.shape[0],1])\n",
    "X = np.concatenate((ones,X),axis=1)\n",
    "\n",
    "Y = LineReg.iloc[:,14:].values \n",
    "beta_start = np.zeros([1,15])\n",
    "\n",
    "print(\"Shape of Feature matrix:\", X.shape)\n",
    "print(\"Shape of Target matrix:\", Y.shape)\n",
    "print(\"Initial beta values:\", beta_start)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Splitting the data into training and test set\n",
    "X_train1,X_test1,y_train1,y_test1 = train_test_split(X,Y,test_size = 0.2,random_state = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.5009200467444308\n"
     ]
    }
   ],
   "source": [
    "#Compute cost with all Betas as zeroes\n",
    "Cost_without_GD = costFunction(X_train1, y_train1, beta_start)\n",
    "print(Cost_without_GD)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "alpha_values = [0.001, 0.005, 0.01, 0.05, 0.1, 0.3, 0.5, 1, 1.5]\n",
    "test_MSE_alpha = []\n",
    "train_MSE_alpha = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Alpha value: 0.001\n",
      "The beta values are: [[ 0.00154805  0.48319849  0.37989681  0.07374952 -0.37267667 -0.35859038\n",
      "   0.00193455 -0.00170853 -0.00969291  0.00445413 -0.02435545 -0.05842351\n",
      "  -0.00732837 -0.08355698 -0.02064125]]\n",
      "The final value of cost function is: 0.22014736144976968\n",
      "The value of cost function converges at: 0\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test data MSE:  0.4396077665612082\n",
      "Train data MSE:  0.44029472289953936\n",
      "Test data R-squared:  0.5570940360959127\n",
      "Train data R-squared:  0.5605116050392753\n"
     ]
    }
   ],
   "source": [
    "#alpha = 0.001\n",
    "a,b = results(X_train1,y_train1,X_test1,y_test1,beta_start,5000,0.001)\n",
    "test_MSE_alpha.append(a)\n",
    "train_MSE_alpha.append(b) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Alpha value: 0.005\n",
      "The beta values are: [[ 0.00149883  0.50305307  0.39703795  0.0868233  -0.39692862 -0.38202227\n",
      "   0.00142321 -0.00076526 -0.00980398 -0.01555317 -0.04176175 -0.05878711\n",
      "  -0.00745733 -0.08423289 -0.02078368]]\n",
      "The final value of cost function is: 0.21943850242697815\n",
      "The value of cost function converges at: 1687\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test data MSE:  0.438470972902679\n",
      "Train data MSE:  0.4388770048539563\n",
      "Test data R-squared:  0.5582393586524941\n",
      "Train data R-squared:  0.5619267267655976\n"
     ]
    }
   ],
   "source": [
    "#alpha = 0.005\n",
    "a,b = results(X_train1,y_train1,X_test1,y_test1,beta_start,5000,0.005)\n",
    "test_MSE_alpha.append(a)\n",
    "train_MSE_alpha.append(b) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Alpha value: 0.01\n",
      "The beta values are: [[ 0.00149911  0.50294162  0.396944    0.0867629  -0.39681461 -0.38191294\n",
      "   0.00144062 -0.00075944 -0.00980373 -0.0154376  -0.04166398 -0.05878733\n",
      "  -0.00745692 -0.08423236 -0.02078364]]\n",
      "The final value of cost function is: 0.21943852171498457\n",
      "The value of cost function converges at: 909\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test data MSE:  0.4384695901227742\n",
      "Train data MSE:  0.43887704342996914\n",
      "Test data R-squared:  0.5582407518068313\n",
      "Train data R-squared:  0.5619266882602304\n"
     ]
    }
   ],
   "source": [
    "#alpha = 0.01\n",
    "a,b = results(X_train1,y_train1,X_test1,y_test1,beta_start,1500,0.01)\n",
    "test_MSE_alpha.append(a)\n",
    "train_MSE_alpha.append(b) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Alpha value: 0.05\n",
      "The beta values are: [[ 0.00149883  0.50305374  0.39703849  0.08682358 -0.39692917 -0.38202279\n",
      "   0.00142304 -0.00076535 -0.00980398 -0.01555387 -0.04176231 -0.05878711\n",
      "  -0.00745733 -0.08423289 -0.02078368]]\n",
      "The final value of cost function is: 0.21943850242639693\n",
      "The value of cost function converges at: 210\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test data MSE:  0.43847098063664636\n",
      "Train data MSE:  0.43887700485279385\n",
      "Test data R-squared:  0.558239350860502\n",
      "Train data R-squared:  0.5619267267667578\n"
     ]
    }
   ],
   "source": [
    "#alpha = 0.05\n",
    "a,b = results(X_train1,y_train1,X_test1,y_test1,beta_start,1500,0.05)\n",
    "test_MSE_alpha.append(a)\n",
    "train_MSE_alpha.append(b) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Alpha value: 0.1\n",
      "The beta values are: [[ 0.00149883  0.50305374  0.39703849  0.08682358 -0.39692917 -0.38202279\n",
      "   0.00142304 -0.00076535 -0.00980398 -0.01555387 -0.04176231 -0.05878711\n",
      "  -0.00745733 -0.08423289 -0.02078368]]\n",
      "The final value of cost function is: 0.21943850242639693\n",
      "The value of cost function converges at: 110\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test data MSE:  0.43847098063664636\n",
      "Train data MSE:  0.43887700485279385\n",
      "Test data R-squared:  0.558239350860502\n",
      "Train data R-squared:  0.5619267267667578\n"
     ]
    }
   ],
   "source": [
    "#alpha = 0.1\n",
    "a,b = results(X_train1,y_train1,X_test1,y_test1,beta_start,1500,0.1)\n",
    "test_MSE_alpha.append(a)\n",
    "train_MSE_alpha.append(b) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Alpha value: 0.3\n",
      "The beta values are: [[ 0.00149883  0.50305374  0.39703849  0.08682358 -0.39692917 -0.38202279\n",
      "   0.00142304 -0.00076535 -0.00980398 -0.01555387 -0.04176231 -0.05878711\n",
      "  -0.00745733 -0.08423289 -0.02078368]]\n",
      "The final value of cost function is: 0.2194385024263969\n",
      "The value of cost function converges at: 38\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test data MSE:  0.43847098063664636\n",
      "Train data MSE:  0.4388770048527938\n",
      "Test data R-squared:  0.558239350860502\n",
      "Train data R-squared:  0.561926726766758\n"
     ]
    }
   ],
   "source": [
    "#alpha = 0.3\n",
    "a,b = results(X_train1,y_train1,X_test1,y_test1,beta_start,1500,0.3)\n",
    "test_MSE_alpha.append(a)\n",
    "train_MSE_alpha.append(b) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Alpha value: 0.5\n",
      "The beta values are: [[ 0.00149883  0.50305374  0.39703849  0.08682358 -0.39692917 -0.38202279\n",
      "   0.00142304 -0.00076535 -0.00980398 -0.01555387 -0.04176231 -0.05878711\n",
      "  -0.00745733 -0.08423289 -0.02078368]]\n",
      "The final value of cost function is: 0.2194385024263969\n",
      "The value of cost function converges at: 22\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test data MSE:  0.43847098063664636\n",
      "Train data MSE:  0.4388770048527938\n",
      "Test data R-squared:  0.558239350860502\n",
      "Train data R-squared:  0.561926726766758\n"
     ]
    }
   ],
   "source": [
    "#alpha = 0.5\n",
    "a,b = results(X_train1,y_train1,X_test1,y_test1,beta_start,1500,0.5)\n",
    "test_MSE_alpha.append(a)\n",
    "train_MSE_alpha.append(b) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Alpha value: 1\n",
      "The beta values are: [[ 0.00149883  0.50305374  0.39703849  0.08682358 -0.39692917 -0.38202279\n",
      "   0.00142304 -0.00076535 -0.00980398 -0.01555387 -0.04176231 -0.05878711\n",
      "  -0.00745733 -0.08423289 -0.02078368]]\n",
      "The final value of cost function is: 0.2194385024263969\n",
      "The value of cost function converges at: 10\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test data MSE:  0.43847098063664636\n",
      "Train data MSE:  0.4388770048527938\n",
      "Test data R-squared:  0.558239350860502\n",
      "Train data R-squared:  0.561926726766758\n"
     ]
    }
   ],
   "source": [
    "#alpha = 1\n",
    "a,b = results(X_train1,y_train1,X_test1,y_test1,beta_start,1000,1)\n",
    "test_MSE_alpha.append(a)\n",
    "train_MSE_alpha.append(b) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Alpha value: 1.5\n",
      "The beta values are: [[-7.17495817e+52 -4.67588649e+54 -2.10056788e+54  9.49017709e+54\n",
      "   1.81438988e+55  1.77072524e+55  2.69611450e+55  2.65570276e+55\n",
      "  -1.27910279e+53 -2.36705146e+55 -2.08444448e+55  9.65484848e+52\n",
      "   9.61247911e+52 -1.31617029e+53  3.48937965e+53]]\n",
      "The final value of cost function is: 2.2712287384243046e+111\n",
      "The value of cost function converges at: 0\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test data MSE:  4.542945393528492e+111\n",
      "Train data MSE:  4.542457476848609e+111\n",
      "Test data R-squared:  -4.5770292554743075e+111\n",
      "Train data R-squared:  -4.534138707206447e+111\n"
     ]
    }
   ],
   "source": [
    "#alpha = 1.5\n",
    "a,b = results(X_train1,y_train1,X_test1,y_test1,beta_start,1000,1.5)\n",
    "test_MSE_alpha.append(a)\n",
    "train_MSE_alpha.append(b) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Experiment 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "convergence_thresh = [0.000000000001,0.00000000001,0.0000000001,0.000000001,0.00000001,0.0000001,0.000001,0.00001]\n",
    "test_MSE = []\n",
    "train_MSE = []\n",
    "GDiterations = []\n",
    "alpha = 0.05\n",
    "for i in convergence_thresh:\n",
    "    beta_cal,cost_cal,convg_cal = gradientDescentThresh(X_train1,y_train1,beta_start,alpha,i)\n",
    "    \n",
    "    y_hat_test = predict(X_test1,beta_cal)\n",
    "    y_hat_train = predict(X_train1,beta_cal)\n",
    "    \n",
    "    test_MSE_i = calculateMSE(y_test1,y_hat_test)\n",
    "    train_MSE_i = calculateMSE(y_train1,y_hat_train)\n",
    "    \n",
    "    test_MSE.append(test_MSE_i)\n",
    "    train_MSE.append(train_MSE_i)\n",
    "    GDiterations.append(convg_cal)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5,1,'Test Data MSE as a function of Threshold')"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(convergence_thresh, test_MSE)\n",
    "plt.xlabel('Convergence Threshold', fontsize=12)\n",
    "plt.ylabel('Test Data MSE', fontsize=12)\n",
    "plt.title('Test Data MSE as a function of Threshold', fontsize=15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5,1,'Train Data MSE as a function of Threshold')"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(convergence_thresh, train_MSE)\n",
    "plt.xlabel('Convergence Threshold', fontsize=12)\n",
    "plt.ylabel('Train Data MSE', fontsize=12)\n",
    "plt.title('Train Data MSE as a function of Threshold', fontsize=15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "best_threshold_value = 0.0000001\n",
    "alpha = 0.05\n",
    "test_error,train_error,convg = gradientDescentIterationsMSE(X_train1,y_train1,X_test1,y_test1,beta_start,\n",
    "                                                     alpha,best_threshold_value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(test_error, label = \"Test Error\")\n",
    "plt.plot(train_error, label = \"Train Error\")\n",
    "plt.xlabel('Gradient Descent Iterations', fontsize=12)\n",
    "plt.ylabel('MSE Error', fontsize=12)\n",
    "plt.title('Train & Test error wrt Number of Gradient Descent Iterations', fontsize=14)\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Experiment 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "column_names = ['MWG', 'NWG', 'KWG', 'MDIMC', 'NDIMC', 'MDIMA', 'NDIMB', 'KWI', 'VWM', 'VWN', 'STRM', 'STRN', 'SA', 'SB']\n",
    "random_features = random.sample(column_names, 8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['STRN', 'STRM', 'KWG', 'NDIMC', 'NWG', 'MDIMA', 'SB', 'MWG', 'LogAvg_Run']"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "random_feature_target = random_features + ['LogAvg_Run']\n",
    "random_feature_target"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>STRN</th>\n",
       "      <th>STRM</th>\n",
       "      <th>KWG</th>\n",
       "      <th>NDIMC</th>\n",
       "      <th>NWG</th>\n",
       "      <th>MDIMA</th>\n",
       "      <th>SB</th>\n",
       "      <th>MWG</th>\n",
       "      <th>LogAvg_Run</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.210997</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-0.998054</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.516757</td>\n",
       "      <td>0.118479</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.210997</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-0.998054</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-0.228050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.210997</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-0.998054</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-0.207353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.210997</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-0.998054</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-0.142961</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.210997</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-0.998054</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.516757</td>\n",
       "      <td>0.135766</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   STRN  STRM       KWG     NDIMC       NWG     MDIMA   SB       MWG  \\\n",
       "0  -1.0  -1.0 -1.210997 -0.753894 -1.516757 -0.998054 -1.0 -1.516757   \n",
       "1  -1.0  -1.0 -1.210997 -0.753894 -1.516757 -0.998054  1.0 -1.516757   \n",
       "2  -1.0  -1.0 -1.210997 -0.753894 -1.516757 -0.998054 -1.0 -1.516757   \n",
       "3  -1.0  -1.0 -1.210997 -0.753894 -1.516757 -0.998054  1.0 -1.516757   \n",
       "4   1.0  -1.0 -1.210997 -0.753894 -1.516757 -0.998054 -1.0 -1.516757   \n",
       "\n",
       "   LogAvg_Run  \n",
       "0    0.118479  \n",
       "1   -0.228050  \n",
       "2   -0.207353  \n",
       "3   -0.142961  \n",
       "4    0.135766  "
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Normalize using StandardScaler function\n",
    "sc = StandardScaler()\n",
    "LineReg_random = df[random_feature_target]\n",
    "LineReg_random = sc.fit_transform(LineReg_random)\n",
    "LineReg_random = pd.DataFrame(LineReg_random)\n",
    "LineReg_random.columns = random_feature_target\n",
    "LineReg_random.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of Feature matrix: (241600, 9)\n",
      "Shape of Target matrix: (241600, 1)\n",
      "Initial beta values: [[0. 0. 0. 0. 0. 0. 0. 0. 0.]]\n"
     ]
    }
   ],
   "source": [
    "#Setting the matrices\n",
    "X = LineReg_random.iloc[:,0:8]\n",
    "ones = np.ones([X.shape[0],1])\n",
    "X = np.concatenate((ones,X),axis=1)\n",
    "\n",
    "Y = LineReg_random.iloc[:,8:].values \n",
    "beta_start = np.zeros([1,9])\n",
    "\n",
    "print(\"Shape of Feature matrix:\", X.shape)\n",
    "print(\"Shape of Target matrix:\", Y.shape)\n",
    "print(\"Initial beta values:\", beta_start)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Splitting the data into training and test set\n",
    "X_train3,X_test3,y_train3,y_test3 = train_test_split(X,Y,test_size = 0.2,random_state = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Alpha value: 0.1\n",
      "The beta values are: [[ 0.00216073 -0.00691293 -0.05842271  0.01036646 -0.27380897  0.37597648\n",
      "  -0.07953231 -0.02098617  0.47045536]]\n",
      "The final value of cost function is: 0.29110064991135376\n",
      "The value of cost function converges at: 68\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test data MSE:  0.5818568076999813\n",
      "Train data MSE:  0.5822012998227075\n",
      "Test data R-squared:  0.4137777585586997\n",
      "Train data R-squared:  0.4188649068557868\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(0.5818568076999813, 0.5822012998227075)"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#alpha = 0.1\n",
    "results(X_train3,y_train3,X_test3,y_test3,beta_start,1500,0.1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Experiment 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Using the Correlation function\n",
    "plt.figure(figsize=(12,10))\n",
    "cor = df.corr()\n",
    "sns.heatmap(cor, annot=True, cmap=plt.cm.Reds)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MWG           0.459029\n",
       "NWG           0.346429\n",
       "KWG           0.020358\n",
       "MDIMC         0.252085\n",
       "NDIMC         0.243448\n",
       "MDIMA         0.023076\n",
       "NDIMB         0.033688\n",
       "KWI           0.011200\n",
       "VWM           0.209574\n",
       "VWN           0.145031\n",
       "STRM          0.058792\n",
       "STRN          0.007790\n",
       "SA            0.084739\n",
       "SB            0.020323\n",
       "LogAvg_Run    1.000000\n",
       "Name: LogAvg_Run, dtype: float64"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Correlation with output variable\n",
    "cor_targetvalue = abs(cor[\"LogAvg_Run\"])\n",
    "cor_targetvalue\n",
    "\n",
    "# We can remove the variables with the least correlation with the target variable log_avg_run\n",
    "# The least correlated variables are STRN 0.007790, KWI 0.011200, SB 0.020323, KWG 0.020358, MDIMA 0.023076 \n",
    "# and NDIMB 0.033688"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "feature_final = ['MWG', 'NWG', 'MDIMC', 'NDIMC', 'VWM', 'VWN', 'STRM', 'SA', 'LogAvg_Run']\n",
    "#feature_final = ['MWG', 'NWG', 'MDIMC', 'NDIMC', 'STRM', 'SA', 'MDIMA', 'NDIMB', 'LogAvg_Run']\n",
    "#feature_final = ['MWG', 'NWG', 'MDIMC', 'NDIMC', 'STRM', 'SA', 'LogAvg_Run']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MWG</th>\n",
       "      <th>NWG</th>\n",
       "      <th>MDIMC</th>\n",
       "      <th>NDIMC</th>\n",
       "      <th>VWM</th>\n",
       "      <th>VWN</th>\n",
       "      <th>STRM</th>\n",
       "      <th>SA</th>\n",
       "      <th>LogAvg_Run</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.741449</td>\n",
       "      <td>-0.741449</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0.118479</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.741449</td>\n",
       "      <td>-0.741449</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.228050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.741449</td>\n",
       "      <td>-0.741449</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.207353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.741449</td>\n",
       "      <td>-0.741449</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.142961</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-1.516757</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.753894</td>\n",
       "      <td>-0.741449</td>\n",
       "      <td>-0.741449</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0.135766</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        MWG       NWG     MDIMC     NDIMC       VWM       VWN  STRM   SA  \\\n",
       "0 -1.516757 -1.516757 -0.753894 -0.753894 -0.741449 -0.741449  -1.0 -1.0   \n",
       "1 -1.516757 -1.516757 -0.753894 -0.753894 -0.741449 -0.741449  -1.0 -1.0   \n",
       "2 -1.516757 -1.516757 -0.753894 -0.753894 -0.741449 -0.741449  -1.0  1.0   \n",
       "3 -1.516757 -1.516757 -0.753894 -0.753894 -0.741449 -0.741449  -1.0  1.0   \n",
       "4 -1.516757 -1.516757 -0.753894 -0.753894 -0.741449 -0.741449  -1.0 -1.0   \n",
       "\n",
       "   LogAvg_Run  \n",
       "0    0.118479  \n",
       "1   -0.228050  \n",
       "2   -0.207353  \n",
       "3   -0.142961  \n",
       "4    0.135766  "
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Normalize using StandardScaler function\n",
    "sc = StandardScaler()\n",
    "LineReg_ff = df[feature_final]\n",
    "LineReg_ff = sc.fit_transform(LineReg_ff)\n",
    "LineReg_ff = pd.DataFrame(LineReg_ff)\n",
    "LineReg_ff.columns = feature_final\n",
    "LineReg_ff.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of Feature matrix: (241600, 9)\n",
      "Shape of Target matrix: (241600, 1)\n",
      "Initial beta values: [[0. 0. 0. 0. 0. 0. 0. 0. 0.]]\n"
     ]
    }
   ],
   "source": [
    "#Setting the matrixes\n",
    "X = LineReg_ff.iloc[:,0:8]\n",
    "ones = np.ones([X.shape[0],1])\n",
    "X = np.concatenate((ones,X),axis=1)\n",
    "\n",
    "Y = LineReg_ff.iloc[:,8:].values \n",
    "beta_start = np.zeros([1,9])\n",
    "\n",
    "print(\"Shape of Feature matrix:\", X.shape)\n",
    "print(\"Shape of Target matrix:\", Y.shape)\n",
    "print(\"Initial beta values:\", beta_start)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of Feature matrix: (241600, 7)\n",
      "Shape of Target matrix: (241600, 1)\n",
      "Initial beta values: [[0. 0. 0. 0. 0. 0. 0.]]\n"
     ]
    }
   ],
   "source": [
    "#Setting the matrixes\n",
    "X = LineReg_ff.iloc[:,0:6]\n",
    "ones = np.ones([X.shape[0],1])\n",
    "X = np.concatenate((ones,X),axis=1)\n",
    "\n",
    "Y = LineReg_ff.iloc[:,8:9].values \n",
    "beta_start = np.zeros([1,7])\n",
    "\n",
    "print(\"Shape of Feature matrix:\", X.shape)\n",
    "print(\"Shape of Target matrix:\", Y.shape)\n",
    "print(\"Initial beta values:\", beta_start)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Splitting the data into training and test set\n",
    "X_train4,X_test4,y_train4,y_test4 = train_test_split(X,Y,train_size=0.8,test_size = 0.2,random_state = 20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Alpha value: 0.1\n",
      "The beta values are: [[-0.00053456  0.50081952  0.39640661 -0.38009599 -0.36537221 -0.0144333\n",
      "  -0.03952338]]\n",
      "The final value of cost function is: 0.2284409102320002\n",
      "The value of cost function converges at: 105\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test data MSE:  0.45760047657022596\n",
      "Train data MSE:  0.4568818204640004\n",
      "Test data R-squared:  0.5413239898084798\n",
      "Train data R-squared:  0.5433834853988679\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(0.45760047657022596, 0.4568818204640004)"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#alpha = 0.1\n",
    "results(X_train4,y_train4,X_test4,y_test4,beta_start,1500,0.1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Calculate Logistic regression cost\n",
    "def logRegCost(X,Y,beta):\n",
    "    y_pred = sigmoid(X,beta)\n",
    "    class1 = np.asarray(Y.T) * np.log((y_pred))\n",
    "    class2 = (1-Y).T * np.log((1-(y_pred)))\n",
    "    finalCost = -(np.sum(class1 + class2)) / (len(X))\n",
    "    return finalCost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "def sigmoid(X,beta):\n",
    "    y_pred = np.zeros(len(X))\n",
    "    for i in range(len(X)):\n",
    "        y_pred[i] = 1 / (1 + math.exp(-(X[i] @ beta.T)))\n",
    "    return y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Implement batch gradient descent\n",
    "def logRegGradientDescent(X,Y,beta,iterations,alpha):\n",
    "    cost = np.zeros(iterations)\n",
    "    diff = 1\n",
    "    convg = 0\n",
    "    for i in range(iterations):\n",
    "        beta = beta - (alpha/len(X)) * np.sum(X * (X @ beta.T - Y), axis=0)\n",
    "        cost[i] = logRegCost(X, Y, beta)\n",
    "        if diff > 0.0000001:    \n",
    "            if i==0:\n",
    "                diff = cost[i]\n",
    "            else:\n",
    "                diff = abs(cost[i] - cost[i-1])\n",
    "                if diff <= 0.0000001:\n",
    "                    convg = i\n",
    "    return beta,cost,convg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Implement batch gradient descent with convergence threshold as input\n",
    "#Stopping the iterations when the threshold is achieved\n",
    "def logRegGradientDescentThresh(X,Y,beta,alpha,thresh,iterations=5000):\n",
    "    cost = []\n",
    "    diff = 1\n",
    "    convg = 0\n",
    "    while diff > thresh:\n",
    "        beta = beta - (alpha/len(X)) * np.sum(X * (X @ beta.T - Y), axis=0)\n",
    "        cost.append(logRegCost(X, Y, beta))\n",
    "        if len(cost)==1:\n",
    "            diff = cost[0]\n",
    "        else:\n",
    "            diff = abs(cost[-1] - cost[-2])\n",
    "            if diff <= thresh:\n",
    "                convg = len(cost)\n",
    "    return beta,cost,convg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Implement batch gradient descent with convergence threshold as input\n",
    "#Stopping the iterations when the threshold is achieved\n",
    "#Calculate Test and Train dataset Error at each iteration\n",
    "def logRegGradientDescentIterationsMSE(X,Y,X_test,Y_test,beta,alpha,thresh,iterations=5000):\n",
    "    test_error = []\n",
    "    train_error = []\n",
    "    cost = []\n",
    "    diff = 1\n",
    "    convg = 0\n",
    "    while diff > thresh:\n",
    "        beta = beta - (alpha/len(X)) * np.sum(X * (X @ beta.T - Y), axis=0)\n",
    "        cost.append(logRegCost(X, Y, beta))\n",
    "        \n",
    "        y_hat_test = logRegYPredict(X_test, beta, 0.5)\n",
    "        y_hat_train = logRegYPredict(X, beta, 0.5)\n",
    "        \n",
    "        test_err_i = 1-accuracy_score(y_hat_test , Y_test)\n",
    "        train_err_i = 1-accuracy_score(y_hat_train , Y)\n",
    "        \n",
    "        test_error.append(test_err_i)\n",
    "        train_error.append(train_err_i)\n",
    "        \n",
    "        if len(cost)==1:\n",
    "            diff = cost[0]\n",
    "        else:\n",
    "            diff = abs(cost[-1] - cost[-2])\n",
    "            if diff <= thresh:\n",
    "                convg = len(cost)\n",
    "    return test_error,train_error,convg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "def logRegYPredict(X,beta,threshold):\n",
    "    y_pred = sigmoid(X,beta)\n",
    "    y_pred_class = np.zeros(len(y_pred))\n",
    "    for i in range(len(y_pred_class)):\n",
    "        if y_pred[i] < threshold:\n",
    "            y_pred_class[i] = 0\n",
    "        elif y_pred[i] >= threshold:\n",
    "            y_pred_class[i] = 1\n",
    "    return y_pred_class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "def CM_Accuracy(Y,Y_pred):\n",
    "    cm = confusion_matrix(Y, Y_pred)\n",
    "    acc = accuracy_score(Y_pred , Y)\n",
    "    print(\"Confusion Matrix:\", cm)\n",
    "    print(\"Accuracy:\", acc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "def LogRegFeatureSel(df,a):\n",
    "    if a == 'All':\n",
    "        X_LogReg = df.iloc[:,0:14]\n",
    "        ones = np.ones([X_LogReg.shape[0],1])\n",
    "        X_LogReg = np.concatenate((ones,X_LogReg),axis=1)\n",
    "        y_LogReg = df.iloc[:,14]\n",
    "        beta_start = np.zeros([1,15])\n",
    "    else:\n",
    "        if a == 'Rand':\n",
    "            column_names = ['MWG', 'NWG', 'KWG', 'MDIMC', 'NDIMC', 'MDIMA', 'NDIMB', 'KWI', 'VWM', 'VWN', 'STRM', 'STRN', 'SA', 'SB']\n",
    "            random_features = random.sample(column_names, 8)    \n",
    "            random_feature_target = random_features + ['LogAvg_Run']\n",
    "            print(\"Random Feature List:\",random_feature_target)\n",
    "            LogReg_feature = df[random_feature_target]\n",
    "        elif a == 'Sel':\n",
    "            feature_final = ['MWG', 'NWG', 'MDIMC', 'NDIMC', 'VWM', 'VWN', 'STRM', 'SA', 'LogAvg_Run']\n",
    "            print(\"Selected Feature List:\",feature_final)\n",
    "            LogReg_feature = df[feature_final]\n",
    "    \n",
    "        X_LogReg = LogReg_feature.iloc[:,0:8]\n",
    "        ones = np.ones([X_LogReg.shape[0],1])\n",
    "        X_LogReg = np.concatenate((ones,X_LogReg),axis=1)\n",
    "        y_LogReg = LogReg_feature.iloc[:,8]\n",
    "        beta_start = np.zeros([1,9])\n",
    "    \n",
    "    return X_LogReg, y_LogReg, beta_start"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "def LogReg(threshold,featureSel):\n",
    "    print(\"Threshold for classification:\", threshold)\n",
    "    \n",
    "    #Checking for number of true values as per threshold\n",
    "    true_false = df.LogAvg_Run > threshold\n",
    "    #true_false = df.Avg_Run > threshold\n",
    "    values = true_false.value_counts()\n",
    "    print(values)\n",
    "    \n",
    "    #Setting the matrices\n",
    "    X_LogReg,y_LogReg,beta_start = LogRegFeatureSel(df,featureSel)\n",
    "    \n",
    "    #Convert the value above threshold to 1s and below threshold to 0s\n",
    "    y_LogReg = y_LogReg.apply(lambda x : 0 if x <= threshold else 1)\n",
    "    y_LogReg = pd.DataFrame(y_LogReg)\n",
    "    y_LogReg = y_LogReg.values\n",
    "    \n",
    "    print(\"Shape of Feature matrix:\", X_LogReg.shape)\n",
    "    print(\"Shape of Target matrix:\", y_LogReg.shape)\n",
    "    print(\"Initial beta values:\", beta_start)\n",
    "    \n",
    "    #Train test split\n",
    "    X_train_LogReg,X_test_LogReg,y_train_LogReg,y_test_LogReg = train_test_split(X_LogReg,y_LogReg,test_size = 0.2,random_state = 0)\n",
    "    \n",
    "    # Feature scaling\n",
    "    sc_LogReg = StandardScaler()\n",
    "    X_train_LogReg = sc_LogReg.fit_transform(X_train_LogReg)\n",
    "    X_test_LogReg = sc_LogReg.transform(X_test_LogReg)\n",
    "    \n",
    "    return X_train_LogReg, X_test_LogReg, y_train_LogReg, y_test_LogReg, beta_start"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "count    241600.000000\n",
      "mean          4.623068\n",
      "std           1.128530\n",
      "min           2.589079\n",
      "25%           3.705429\n",
      "50%           4.245491\n",
      "75%           5.431044\n",
      "max           8.114177\n",
      "Name: LogAvg_Run, dtype: float64\n",
      "4.245490733029061\n"
     ]
    }
   ],
   "source": [
    "# Finding the threshold value for doing the classification\n",
    "print(df.LogAvg_Run.describe())\n",
    "print(df.LogAvg_Run.median())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Threshold for classification: 4.2\n",
      "True     126726\n",
      "False    114874\n",
      "Name: LogAvg_Run, dtype: int64\n",
      "Shape of Feature matrix: (241600, 15)\n",
      "Shape of Target matrix: (241600, 1)\n",
      "Initial beta values: [[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]\n",
      "The beta values are: [[ 0.          0.2155154   0.11739876  0.02597447 -0.13736748 -0.11397258\n",
      "  -0.0075478  -0.01194574 -0.00151279 -0.00419825 -0.02537337 -0.05187932\n",
      "  -0.00513864 -0.07559873 -0.012793  ]]\n",
      "The final value of cost function is: 0.6210624578912857\n",
      "The value of cost function converges at: 177\n"
     ]
    }
   ],
   "source": [
    "#threshold = 4.2\n",
    "#alpha = 0.1\n",
    "X_train_LogReg, X_test_LogReg, y_train_LogReg, y_test_LogReg, beta_start = LogReg(4.2,'All')\n",
    "beta_cal,cost_cal,convg_cal = logRegGradientDescent(X_train_LogReg,y_train_LogReg,beta_start,500,0.1)\n",
    "\n",
    "print(\"The beta values are:\",beta_cal)\n",
    "print(\"The final value of cost function is:\", cost_cal[-1])\n",
    "print(\"The value of cost function converges at:\", convg_cal)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Experiment 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion Matrix: [[74645 17086]\n",
      " [23354 78195]]\n",
      "Accuracy: 0.7907698675496688\n",
      "Confusion Matrix: [[18772  4371]\n",
      " [ 5760 19417]]\n",
      "Accuracy: 0.7903352649006623\n"
     ]
    }
   ],
   "source": [
    "#Prediction threshold = 0.5\n",
    "#Confusion matrix and accuracy score train dataset\n",
    "y_train_LogReg_pred = logRegYPredict(X_train_LogReg, beta_cal, 0.5)\n",
    "CM_Accuracy(y_train_LogReg, y_train_LogReg_pred)\n",
    "\n",
    "#Confusion matrix and accuracy score train dataset\n",
    "y_test_LogReg_pred = logRegYPredict(X_test_LogReg, beta_cal, 0.5)\n",
    "CM_Accuracy(y_test_LogReg, y_test_LogReg_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion Matrix: [[    24  91707]\n",
      " [    71 101478]]\n",
      "Accuracy: 0.5251552152317881\n",
      "Confusion Matrix: [[    9 23134]\n",
      " [   18 25159]]\n",
      "Accuracy: 0.5208609271523179\n"
     ]
    }
   ],
   "source": [
    "#Prediction threshold = 0.3\n",
    "#Confusion matrix and accuracy score train dataset\n",
    "y_train_LogReg_pred = logRegYPredict(X_train_LogReg, beta_cal, 0.3)\n",
    "CM_Accuracy(y_train_LogReg, y_train_LogReg_pred)\n",
    "\n",
    "#Confusion matrix and accuracy score train dataset\n",
    "y_test_LogReg_pred = logRegYPredict(X_test_LogReg, beta_cal, 0.3)\n",
    "CM_Accuracy(y_test_LogReg, y_test_LogReg_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion Matrix: [[ 91731      0]\n",
      " [101549      0]]\n",
      "Accuracy: 0.4746016142384106\n",
      "Confusion Matrix: [[23143     0]\n",
      " [25177     0]]\n",
      "Accuracy: 0.4789528145695364\n"
     ]
    }
   ],
   "source": [
    "#Prediction threshold = 0.7\n",
    "#Confusion matrix and accuracy score train dataset\n",
    "y_train_LogReg_pred = logRegYPredict(X_train_LogReg, beta_cal, 0.7)\n",
    "CM_Accuracy(y_train_LogReg, y_train_LogReg_pred)\n",
    "\n",
    "#Confusion matrix and accuracy score train dataset\n",
    "y_test_LogReg_pred = logRegYPredict(X_test_LogReg, beta_cal, 0.7)\n",
    "CM_Accuracy(y_test_LogReg, y_test_LogReg_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Experiment 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Convergence Threshold: 1e-05\n",
      "Convergence Iteration: 92\n",
      "Final Cost function: 0.6212428972712493\n",
      "Test Error: 0.20974751655629142\n",
      "Train error: 0.20935430463576155\n",
      "Convergence Threshold: 1e-06\n",
      "Convergence Iteration: 135\n",
      "Final Cost function: 0.6210804075146773\n",
      "Test Error: 0.20968543046357613\n",
      "Train error: 0.2092197847682119\n",
      "Convergence Threshold: 1e-07\n",
      "Convergence Iteration: 178\n",
      "Final Cost function: 0.621064255128002\n",
      "Test Error: 0.20968543046357613\n",
      "Train error: 0.20922495860927148\n",
      "Convergence Threshold: 1e-08\n",
      "Convergence Iteration: 221\n",
      "Final Cost function: 0.6210626385009352\n",
      "Test Error: 0.2096647350993377\n",
      "Train error: 0.20922495860927148\n",
      "Convergence Threshold: 1e-09\n",
      "Convergence Iteration: 264\n",
      "Final Cost function: 0.6210624761032455\n",
      "Test Error: 0.2096647350993377\n",
      "Train error: 0.20923013245033117\n",
      "Convergence Threshold: 1e-10\n",
      "Convergence Iteration: 308\n",
      "Final Cost function: 0.6210624596384069\n",
      "Test Error: 0.2096647350993377\n",
      "Train error: 0.20923013245033117\n",
      "Convergence Threshold: 1e-11\n",
      "Convergence Iteration: 351\n",
      "Final Cost function: 0.6210624580686243\n",
      "Test Error: 0.2096647350993377\n",
      "Train error: 0.20923013245033117\n",
      "Convergence Threshold: 1e-12\n",
      "Convergence Iteration: 394\n",
      "Final Cost function: 0.6210624579092949\n",
      "Test Error: 0.2096647350993377\n",
      "Train error: 0.20923013245033117\n"
     ]
    }
   ],
   "source": [
    "convergence_thresh = [0.00001,0.000001,0.0000001,0.00000001,0.000000001,0.0000000001,0.00000000001,0.000000000001]\n",
    "test_error = []\n",
    "train_error = []\n",
    "GDiterations = []\n",
    "alpha = 0.1\n",
    "\n",
    "for i in convergence_thresh:\n",
    "    \n",
    "    print(\"Convergence Threshold:\",i)\n",
    "    \n",
    "    beta_cal,cost_cal,convg_cal = logRegGradientDescentThresh(X_train_LogReg,y_train_LogReg,beta_start,alpha,i)\n",
    "    \n",
    "    print(\"Convergence Iteration:\", convg_cal)\n",
    "    print(\"Final Cost function:\", cost_cal[-1])\n",
    "    \n",
    "    y_hat_test = logRegYPredict(X_test_LogReg, beta_cal, 0.5)\n",
    "    y_hat_train = logRegYPredict(X_train_LogReg, beta_cal, 0.5)\n",
    "    \n",
    "    test_err_i = 1-accuracy_score(y_hat_test , y_test_LogReg)\n",
    "    train_err_i = 1-accuracy_score(y_hat_train , y_train_LogReg)\n",
    "    \n",
    "    print(\"Test Error:\",test_err_i)\n",
    "    print(\"Train error:\",train_err_i)\n",
    "    \n",
    "    test_error.append(test_err_i)\n",
    "    train_error.append(train_err_i)\n",
    "    GDiterations.append(convg_cal)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5,1,'Test Data Error as a function of Threshold')"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(convergence_thresh, test_error)\n",
    "plt.xlabel('Convergence Threshold', fontsize=12)\n",
    "plt.ylabel('Test Data Error', fontsize=12)\n",
    "plt.title('Test Data Error as a function of Threshold', fontsize=15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5,1,'Train Data Error as a function of Threshold')"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(convergence_thresh, train_error)\n",
    "plt.xlabel('Convergence Threshold', fontsize=12)\n",
    "plt.ylabel('Train Data Error', fontsize=12)\n",
    "plt.title('Train Data Error as a function of Threshold', fontsize=15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "best_threshold_value = 0.0000001\n",
    "alpha = 0.1\n",
    "test_error,train_error,convg = logRegGradientDescentIterationsMSE(X_train_LogReg,y_train_LogReg,X_test_LogReg,y_test_LogReg,\n",
    "                                                         beta_start,alpha,best_threshold_value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(test_error, label = \"Test Error\")\n",
    "plt.plot(train_error, label = \"Train Error\")\n",
    "plt.xlabel('Gradient Descent Iterations', fontsize=12)\n",
    "plt.ylabel('Error', fontsize=12)\n",
    "plt.title('Train & Test error wrt Number of Gradient Descent Iterations', fontsize=14)\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Experiment 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Threshold for classification: 4.2\n",
      "True     126726\n",
      "False    114874\n",
      "Name: LogAvg_Run, dtype: int64\n",
      "Random Feature List: ['KWI', 'NDIMB', 'MDIMC', 'STRN', 'MDIMA', 'VWN', 'VWM', 'STRM', 'LogAvg_Run']\n",
      "Shape of Feature matrix: (241600, 9)\n",
      "Shape of Target matrix: (241600, 1)\n",
      "Initial beta values: [[0. 0. 0. 0. 0. 0. 0. 0. 0.]]\n",
      "The beta values are: [[ 0.         -0.00147255 -0.00764294 -0.08379579 -0.00502028  0.02566157\n",
      "   0.03161685  0.08470629 -0.05222786]]\n",
      "The final value of cost function is: 0.6765640837507373\n",
      "The value of cost function converges at: 105\n"
     ]
    }
   ],
   "source": [
    "#threshold = 4.2\n",
    "#alpha = 0.1\n",
    "X_train_LogReg, X_test_LogReg, y_train_LogReg, y_test_LogReg, beta_start = LogReg(4.2,'Rand')\n",
    "beta_cal,cost_cal,convg_cal = logRegGradientDescent(X_train_LogReg,y_train_LogReg,beta_start,500,0.1)\n",
    "\n",
    "print(\"The beta values are:\",beta_cal)\n",
    "print(\"The final value of cost function is:\", cost_cal[-1])\n",
    "print(\"The value of cost function converges at:\", convg_cal)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion Matrix: [[57448 34283]\n",
      " [40444 61105]]\n",
      "Accuracy: 0.6133743791390729\n",
      "Confusion Matrix: [[14562  8581]\n",
      " [10042 15135]]\n",
      "Accuracy: 0.6145902317880795\n"
     ]
    }
   ],
   "source": [
    "#Prediction threshold = 0.5\n",
    "#Confusion matrix and accuracy score train dataset\n",
    "y_train_LogReg_pred = logRegYPredict(X_train_LogReg, beta_cal, 0.5)\n",
    "CM_Accuracy(y_train_LogReg, y_train_LogReg_pred)\n",
    "\n",
    "#Confusion matrix and accuracy score train dataset\n",
    "y_test_LogReg_pred = logRegYPredict(X_test_LogReg, beta_cal, 0.5)\n",
    "CM_Accuracy(y_test_LogReg, y_test_LogReg_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Experiment 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Threshold for classification: 4.2\n",
      "True     126726\n",
      "False    114874\n",
      "Name: LogAvg_Run, dtype: int64\n",
      "Selected Feature List: ['MWG', 'NWG', 'MDIMC', 'NDIMC', 'VWM', 'VWN', 'STRM', 'SA', 'LogAvg_Run']\n",
      "Shape of Feature matrix: (241600, 9)\n",
      "Shape of Target matrix: (241600, 1)\n",
      "Initial beta values: [[0. 0. 0. 0. 0. 0. 0. 0. 0.]]\n",
      "The beta values are: [[ 0.          0.21324372  0.11415364 -0.13507953 -0.11182658 -0.0017006\n",
      "  -0.02173186 -0.0518906  -0.07554606]]\n",
      "The final value of cost function is: 0.6220208421499066\n",
      "The value of cost function converges at: 169\n"
     ]
    }
   ],
   "source": [
    "#threshold = 4.2\n",
    "#alpha = 0.1\n",
    "X_train_LogReg, X_test_LogReg, y_train_LogReg, y_test_LogReg, beta_start = LogReg(4.2,'Sel')\n",
    "beta_cal,cost_cal,convg_cal = logRegGradientDescent(X_train_LogReg,y_train_LogReg,beta_start,500,0.1)\n",
    "\n",
    "print(\"The beta values are:\",beta_cal)\n",
    "print(\"The final value of cost function is:\", cost_cal[-1])\n",
    "print(\"The value of cost function converges at:\", convg_cal)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "For train dataset:\n",
      "Confusion Matrix: [[74391 17340]\n",
      " [23788 77761]]\n",
      "Accuracy: 0.7872102649006623\n",
      "For test dataset:\n",
      "Confusion Matrix: [[18753  4390]\n",
      " [ 5900 19277]]\n",
      "Accuracy: 0.7870447019867549\n"
     ]
    }
   ],
   "source": [
    "#Prediction threshold = 0.5\n",
    "#Confusion matrix and accuracy score train dataset\n",
    "print(\"For train dataset:\")\n",
    "y_train_LogReg_pred = logRegYPredict(X_train_LogReg, beta_cal, 0.5)\n",
    "CM_Accuracy(y_train_LogReg, y_train_LogReg_pred)\n",
    "\n",
    "#Confusion matrix and accuracy score train dataset\n",
    "print(\"For test dataset:\")\n",
    "y_test_LogReg_pred = logRegYPredict(X_test_LogReg, beta_cal, 0.5)\n",
    "CM_Accuracy(y_test_LogReg, y_test_LogReg_pred)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [default]",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
